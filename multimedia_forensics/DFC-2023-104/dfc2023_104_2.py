# -*- coding: utf-8 -*-
"""DFC2023-104-2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Em4tBeoEYCnulkfqVq-ov-Lo6jVxoOmM
"""

from google.colab import drive
import matplotlib.pyplot as plt
import numpy as np
import librosa

drive.mount('/content/gdrive')

original_audio, sr_original_audio = librosa.load('/content/gdrive/MyDrive/original.wav')
fake_mix_audio, sr_fake_mix_audio = librosa.load('/content/gdrive/MyDrive/modified.wav')

A_original_audio = np.abs(librosa.stft(original_audio))
A_fake_mix_audio = np.abs(librosa.stft(fake_mix_audio))

threshold = 1
time_frame = np.sum(np.abs(A_original_audio - A_fake_mix_audio), axis =0)
# 임계값을 넘는 인덱스 찾기
indices_where_exceeds_threshold = np.where(time_frame > threshold)[0]

# 변경된 음성이 시작되는 인덱스 찾기
fake_voice_start = indices_where_exceeds_threshold[0] if indices_where_exceeds_threshold.size > 0 else None

#시작 시각 계산 (fake voice start 가 None 이 아닐 때만 계산)
if fake_voice_start is not None:
  start_time_seconds = fake_voice_start * (len(original_audio) / sr_original_audio) / len(time_frame)
  print (f'fake audio start at {start_time_seconds} seconds')
else:
  print('Threshold not exceeded')

# 주파수 변화 감지 (종료 시점)
if fake_voice_start is not None:
    indices_where_exceeds_threshold_end = np.where(time_frame[fake_voice_start:] <= threshold)[0]
    fake_voice_end = indices_where_exceeds_threshold_end[0] + fake_voice_start if indices_where_exceeds_threshold_end.size > 0 else None

    # 종료 시각 계산 (fake_voice_end가 None이 아닐 때만 계산)
    if fake_voice_end is not None:
        end_time_seconds = fake_voice_end * (len(original_audio) / sr_original_audio) / len(time_frame)
        print(f'fake audio finish at {end_time_seconds} seconds')
    else:
        print('No end point found within threshold')
else:
    fake_voice_end = None
    print('Threshold not exceeded at start, so end point not calculated')

#시각화
plt.figure(figsize=(10,4))
plt.plot(time_frame)
plt.axvline (fake_voice_start, color='r', linestyle='-', label='fake voice start')
plt.axvline (fake_voice_end, color='r', linestyle='-', label='fake voice finish')
plt.legend()
plt.xlabel('Time Frame')
plt.ylabel('Frequency Change')
plt.show()